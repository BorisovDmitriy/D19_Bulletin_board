1. Создаем проект bulletin_board
-- можно создать командами в терминале
Создаём виртуальное окружение:
TODO $ python3 -m venv venv
Заходим в него:
TODO ~/django-projects $ source venv/bin/activate

2. Устанавливаем Django в свежее виртуальное окружение
TODO (venv) ~/django-projects $ pip3 install django
Проверяем установку: pip list

3. Создаем необходимый проект:
TODO (venv) ~/django-projects $ django-admin startproject django-projects

4.Переходим в директорию проекта:
TODO (venv) ~/django-projects $ cd django-projects

5. Создаем новое приложение
TODO (venv) ~/django-projects/django-projects $ python3 manage.py startapp app

6. Перейдем в файл django-projects/settings.py и найдём там список INSTALLED_APPS:
 Вписываем приложение board
 --Произвести предварительные настройки
 LANGUAGE_CODE = 'ru'

7. ---D5--- Пишем Models.py,
--написал все кроме Media

8.--D5-- Делаем миграции и пишем файл Django Shell для отладки системы и удобного запуска
TODO (venv) ~/django-projects/django-projects $ python3 manage.py makemigrations
TODO (venv) ~/django-projects/django-projects $ python3 manage.py migrate

9.Создаем администратора
TODO python manage.py createsuperuser
Username: dmitriy
@mail: Пропустить пока
password: qwer147
Можем попасть на страничку администратора http://127.0.0.1:8000/admin/auth/user/

10.Подключаем ещё приложения для создания статических страничек
Переходим в файл NewsPaper/settings.py
Найдём там список INSTALLED_APPS
 'django.contrib.sites',
 'django.contrib.flatpages',
Ниже в файле и добавим переменную SITE_ID, равную единице SITE_ID=1

11. После чего нам надо будет сделать так, чтобы адреса в будущем написанных
нами страничек были доступны нам для перехода по ним.
Для этого нам понадобится файл NewsPaper/setting/urls.py.
Добавляем: path('pages/', include('django.contrib.flatpages.urls')),

12.Переходим в файл NewsPaper/settings.py, заменим список MIDDLEWARE
Добавляем: 'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',

13. Делаем миграцию выполняем
TODO python manage.py migrate

14. выполняем python manage.py runserver запуск сервера и переходим в
админку для создания первой странички /about/

15. В директории с файлом manage.py нужно создать файл по следующему
пути: templates/flatpages/default.html.
заполняем его

16. Переходим в файл NewsPaper/settings.py поменяйте список TEMPLATES
# в настройках на следующий
# import os
# и наполняем строку 'DIRS': 'DIRS': [os.path.join(BASE_DIR, 'templates')]

17.Создаем шаблон Bootstrap(качаем архив, создаем папку static, распаковываем архив,
# # удаляем лишнее..СМ D1.5)
# Переходим в файл NewsPaper/settings.py И в настройках добавить строчку в
самом конце,
# для подгрузки стилей из папки static :
# STATICFILES_DIRS = [BASE_DIR / "static"]

# содержимое файла index.html нам надо скопировать в шаблон board.html, и смело
можем его затем удалять (СМ D1.5) вносим изменения в шаблон
Первым делом нас интересует блок head. Подгружаем стили с помощью команды
{% load static %}. Удаляем строчку, которая отвечает за иконку:
<link rel="icon" type="image/x-icon" href="assets/favicon.ico" />
И изменяем строчку, которая отвечает за подгрузку наших стилей:
<link href="css/styles.css" rel="stylesheet" />  на
<link href="{% static 'css/styles.css' %}" rel="stylesheet" />
Таким образом мы сказали, что стили на данной странице должны
быть взяты из static/css/styles.css.
Основной шаблон default.html

№18 Зарегистрировать модели, иначе не увидим их в админке.
# Регистрируем модели!!!
# Переходим в файл NewsPaper/news/admin.py


19. Пишем  ВЬЮШКИ и регистрируем их в board/urls
Переходим в файл views.py
Заполняем вьюху на модели в соответствии с тех. заданием (см D6.2)

20 вывод из базы данных. Для этого нам надо отправиться в наш главный файл urls.py,
в котором мы уже подключали flatpages и сделать так, чтобы он автоматически включал
се наши адреса из приложения и добавлял к нему префикс news.
Переходим в файл NewsPaper/NewsPaper/urls.py
Вносим изменения

21 пишем шаблоны, с каждым представлением выполняем п.19 и 21 и соединяем с главным шаблоном default
-создал ad_list  и ad

22.D7 (пагинацию добавил сразу)
Создаем поисковик
TODO python -m pip install django-filter

Не забываем вписать ‘django_filters’ в INSTALLED_APPS в настройках, чтобы получить доступ к фильтрам в приложении.
Теперь надо создать файл filters.py в директории simple_app/ в той же папке, где лежат наши модели и всё остальное.
Заполняем файл

TODO Пока фильтр не писал, он по тех. заданию нужен для ОТКЛИКОВ

23 Создаем форму для объявлений, для создания и редактирования их. forms.py
добавим одну хитрость в наш models.py .
# def get_absolute_url(self):
# # добавим абсолютный путь, чтобы после создания нас перебрасывало на страницу с товаром
#     return f'/products/{self.id}'
 переходим во view, добавляем инфу в AdCreate

24/TODO Account
24.1. Создаем новое приложение
TODO (venv) ~/django-projects/django-projects $ python3 manage.py startapp accounts

24.2 Перейдем в файл django-projects/settings.py и найдём там список INSTALLED_APPS:
 Вписываем приложение board

Создаем модель
В settings добавляем  LOGIN_URL = '/accounts/login/'
ALLOWED_HOSTS = ['127.0.0.1'] строка уже есть просто вводим host

-- Правим bulletin_board/urls.py:
    path('accounts/', include('accounts.urls')),

--Веб-страница входа
 стр.604
 пишем view
 1.Login (view temlates)
 2 32.2.3. Веб-страница выхода
 Страница выхода должна быть доступна только зарегистрированным пользоватей
лям, выполнившим вход. Поэтому мы добавили в число суперклассов контроллера-
класса BBLogoutView примесь LoginRequiredMixin.
 !! Страницу профиля пока не писал надо понять логику объявления и откликов

--Веб-страницы регистрации и активации пользователей
a) Создаем форму о новом пользователе
b) Средства для регистрации пользователя view.py

--Очередность требует проставить права доступа к ресурсам сайта, создать,  удалить редактировать
переходим во board.view

25 TODO/Email
--Добавил настройки в settings.py
32.4.1. Средства для отправки писем с требованиями активации
def send_activation_notification(user):
32.4.2. Веб-страницы активации пользователя
def user_activate(request, sign):


26 TODO/signals
-- В папке с news/views.py создайте новый файл:signals.py
Пишем сигнал в соответвии с заданием

--  Теперь, поскольку файл у нас вообще отдельный и нигде в приложении не встречается,
 декораторы receive сработать не смогут, а значит функции-обработчики не будут
 привязаны к сигналам. Давайте это исправимс помощью небольших изменений
  в файле: news/app.py

-- Теперь идём в settings.py. Здесь нас интересуют именно установленные приложения.
подключаем наше приложение новостей и статей
(автоматом при создании проекта создалось в данном случае)
тут же подключаются сигналы (они в ready внутри NewsConfig прописаны)
'news.apps.NewsConfig',

27 TODO/страница пользователя
Пишем представление на основе функции

